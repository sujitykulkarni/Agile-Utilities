{"version":3,"sources":["components/timeInput.tsx","components/timeOutput.tsx","components/calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimeInput","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRows","inputs","state","map","input","index","react_default","a","createElement","key","type","value","days","onChange","handleInputChange","data-key","data-type","hours","minutes","onClick","removeRow","disabled","length","addRow","onCalculate","push","setState","event","currentTarget","dataset","console","log","splice","parseInt","target","forEach","toString","reset","onReset","inherits","createClass","Fragment","className","colSpan","React","Component","TimeOutput","apply","arguments","_this$props$output","output","concat","defaultOutput","Calculator","handleCalculate","stripChars","reduce","getTotalTime","sanitizeTime","replace","acc","cur","totalDays","totalHours","totalMinutes","assign","handleOnReset","objectSpread","timeOutput_TimeOutput","timeInput_TimeInput","App","calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de3943d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface IProps {\r\n    onCalculate(inputs: IInput[]): void;\r\n    onReset(): void;\r\n}\r\ninterface IState {\r\n    inputs: IInput[];\r\n}\r\n\r\nexport interface IInput {\r\n    days: string;\r\n    hours: string;\r\n    minutes: string;\r\n    [key: string]: string;\r\n}\r\n\r\nexport class TimeInput extends React.Component<IProps, IState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { \r\n            inputs: [\r\n                {\r\n                    days: '',\r\n                    hours: '',\r\n                    minutes: '',\r\n                },\r\n            ], \r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <table className=\"timeInput__table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Days</th>\r\n                            <th>Hours</th>\r\n                            <th>Minutes</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getRows()}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td colSpan={2}>\r\n                                <button onClick={this.addRow} className=\"btn--accent\">Add</button>\r\n                            </td>\r\n                            <td colSpan={1}>\r\n                                <button onClick={this.reset}>Reset</button>\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private getRows = () => {\r\n        const { inputs } = this.state;\r\n        return inputs.map((input: IInput, index: number) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <td><input type=\"number\" value={input.days} onChange={this.handleInputChange} data-key={index} data-type=\"days\"/></td>\r\n                    <td><input type=\"number\" value={input.hours} onChange={this.handleInputChange} data-key={index} data-type=\"hours\"/></td>\r\n                    <td><input type=\"number\" value={input.minutes} onChange={this.handleInputChange} data-key={index} data-type=\"minutes\"/></td>\r\n                    <td><button onClick={this.removeRow} data-key={index} disabled={(inputs.length === 1) ? true : false}>Remove</button></td>\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n\r\n    private addRow = () => {\r\n        this.props.onCalculate(this.state.inputs);\r\n        const defaultInput: IInput = {\r\n            days: '',\r\n            hours: '',\r\n            minutes: '',\r\n        };\r\n        let inputs = this.state.inputs;\r\n        inputs.push(defaultInput);\r\n        this.setState({\r\n            inputs,\r\n        });\r\n    }\r\n\r\n    private removeRow = (event: React.MouseEvent<HTMLElement>) => {\r\n        let inputs = this.state.inputs;\r\n        const key = event.currentTarget.dataset.key;\r\n        console.log(key);      \r\n        if(inputs.length > 1 && key){\r\n            inputs.splice(parseInt(key), 1);\r\n        }\r\n        this.setState({\r\n            inputs,\r\n        });\r\n        this.props.onCalculate(this.state.inputs);\r\n    }\r\n\r\n    private handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let inputs: IInput[] = this.state.inputs;\r\n        const key = event.target.dataset.key;\r\n        const type = event.target.dataset.type;\r\n        inputs.forEach((input, index) => {\r\n            if((index.toString() === key) && type){\r\n                input[type] = event.target.value;\r\n            }\r\n        });\r\n        this.setState({\r\n            inputs,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    private reset = () => {\r\n        const defaultInput: IInput = {\r\n            days: '',\r\n            hours: '',\r\n            minutes: '',\r\n        };\r\n        this.setState({\r\n            inputs: [defaultInput],\r\n        });\r\n        this.props.onReset();\r\n    }\r\n}","import React from 'react';\r\nimport { IInput } from './timeInput';\r\ninterface IProps {\r\n    output: IInput;\r\n}\r\nexport class TimeOutput extends React.Component<IProps, any> {\r\n    render() {\r\n        const { days, hours, minutes } = this.props.output;\r\n        return (\r\n            <div className=\"timeOutput\">\r\n                <h1 className=\"timeOutput__title\">Total time</h1>            \r\n                <h3 className=\"timeOutput__value\">{`${days} ${hours} ${minutes}`}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { TimeInput, IInput } from './timeInput';\r\nimport { TimeOutput } from './timeOutput';\r\n\r\ninterface IState {\r\n    output: IInput;\r\n}\r\n\r\nconst defaultOutput: IInput = {\r\n    days: '0 days',\r\n    hours: '0 hours',\r\n    minutes: '0 minutes',\r\n};\r\n\r\n/**\r\n * A parent component that hosts time input and output\r\n *\r\n * @export\r\n * @class Calculator\r\n * @extends {React.Component<{}, IState>}\r\n */\r\nexport class Calculator extends React.Component<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            output: { ...defaultOutput},\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <section className=\"calculator\">\r\n                <TimeOutput output={this.state.output} />\r\n                <TimeInput onCalculate={this.handleCalculate} onReset={this.handleOnReset}/>\r\n            </section>\r\n        )\r\n    };\r\n\r\n    private handleCalculate = (inputs: IInput[]) => {\r\n        const days = inputs.map(input => this.stripChars(input.days)).reduce(this.getTotalTime, 0);\r\n        const hours = inputs.map(input => this.stripChars(input.hours)).reduce(this.getTotalTime, 0);\r\n        const minutes = inputs.map(input => this.stripChars(input.minutes)).reduce(this.getTotalTime, 0);\r\n        this.sanitizeTime(days, hours, minutes);\r\n    }\r\n\r\n    private stripChars = (value: string): number => {\r\n        const pattern = /\\D/g;\r\n        if (value) {\r\n            return parseInt(value.replace(pattern, ''));\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private getTotalTime = (acc: number, cur: number) => acc + cur;\r\n\r\n    private sanitizeTime = (days: number, hours: number, minutes: number) => {\r\n        let totalDays = days;\r\n        let totalHours = hours;\r\n        let totalMinutes = minutes;\r\n        if (minutes >= 60) {\r\n            totalHours += ~~(minutes / 60);\r\n            totalMinutes = (minutes % 60);\r\n        }\r\n        if (totalHours >= 24) {\r\n            totalDays += ~~(totalHours / 24);\r\n            totalHours = (totalHours % 24);\r\n        }\r\n        const output = Object.assign(this.state.output, {\r\n            days: `${totalDays} days`,\r\n            hours: `${totalHours} hours`,\r\n            minutes: `${totalMinutes} minutes`,\r\n        });\r\n        this.setState({\r\n            output,\r\n        });\r\n    }\r\n\r\n    private handleOnReset = () => {\r\n        console.log('handleOnReset');\r\n        this.setState({\r\n            output: defaultOutput,\r\n        });\r\n    }\r\n}","import React from 'react';\nimport { Calculator } from './components/calculator';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>JIRA Time Calculator</h1>\n        <p>A utility to calculate time using the day, hour, minute analogy of JIRA.</p>\n      </header>\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}